<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

    <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/testtoby?useSSL=false"/>
        <property name="username" value="root"/>
        <property name="password" value="1111"/>
    </bean>
    <bean id="userDao" class="dao.independent.UserDaoJDBC">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="mailSender" class="dao.independent.DummyMailSender">
    </bean>

    <!--    <bean id="userServiceImpl" class="dao.service.UserServiceImpl">-->
    <!--        <property name="userDao" ref="userDao"/>-->
    <!--        <property name="mailSender" ref="mailSender"/>-->
    <!--    </bean>-->


    <!--    <bean id="message" class="proxy.MessageFactoryBean">-->
    <!--        <property name="text" value="Factory Bean"/>-->
    <!--    </bean>-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <constructor-arg ref="dataSource"/>
    </bean>


    <!--    <bean id="userService" class="proxy.TxProxyFactoryBean">-->
    <!--        <property name="target" ref="userServiceImpl"/>-->
    <!--        <property name="transactionManager" ref="transactionManager"/>-->
    <!--        <property name="pattern" value="upgradeLevels"/>-->
    <!--        &lt;!&ndash;Class 타입은 value 를 이용해 클래스 또는 인터페이스의 이름을 넣어주면 됨-->
    <!--            스프링은 수정자 메소드의 파라미터 타입을 확인해서 프로퍼티의 타입이 Class 인 경우-->
    <!--            value로 설정한 이름을 가진 Class 오브젝트로 자동 변환해준다.&ndash;&gt;-->
    <!--        <property name="serviceInterface" value="dao.service.UserService"/>-->
    <!--    </bean>-->

    <bean id="transactionAdvice" class="proxy.TransactionAdvice">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <!--    <bean id="transactionPointcut" class="org.springframework.aop.support.NameMatchMethodPointcut">-->
    <!--        <property name="mappedName" value="upgrade*"/>-->
    <!--    </bean>-->

    <!--    <bean id="transactionAdvisor"-->
    <!--          class="org.springframework.aop.support.DefaultPointcutAdvisor">-->
    <!--        <property name="advice" ref="transactionAdvice"/>-->
    <!--        <property name="pointcut" ref="transactionPointcut"/>-->
    <!--    </bean>-->

    <!--    <bean id="userService" class="org.springframework.aop.framework.ProxyFactoryBean">-->
    <!--        <property name="target" ref="userServiceImpl"/>-->
    <!--        <property name="interceptorNames">-->
    <!--            <list>-->
    <!--                <value>transactionAdvisor</value>-->
    <!--            </list>-->
    <!--        </property>-->
    <!--    </bean>-->

    <!--    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>-->

    <!--    <bean id="transactionPointcut" class="proxy.NameMatchClassMethodPointcut">-->
    <!--        <property name="mappedClassName" value="*ServiceImpl"/>-->
    <!--        <property name="mappedName" value="upgrade*"/>-->
    <!--    </bean>-->

    <!--    <bean id="transactionPointcut" class="org.springframework.aop.aspectj.AspectJExpressionPointcut">-->
    <!--        <property name="expression" value="execution(* *..*ServiceImpl.upgrade*(..))"/>-->
    <!--    </bean>-->

    <bean id="userService" class="dao.service.UserServiceImpl">
        <property name="userDao" ref="userDao"/>
        <property name="mailSender" ref="mailSender"/>
    </bean>
    <!--parent 어트리뷰트는 다른 빈 설정의 내용을 상속받기 위함-->
    <bean id="testUserService" class="proxy.UserServiceTest$TestUserServiceImpl" parent="userService"/>

    <aop:config>
        <!--        <aop:pointcut id="transactionPointcut" expression="execution(* *..*ServiceImpl.upgrade*(..))"/>-->
        <!--        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut"/>-->
        <aop:advisor advice-ref="transactionAdvice" pointcut="execution(* *..*ServiceImpl.upgrade*(..))"/>
    </aop:config>

    <bean id="transactionAdvice" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="transactionAttributes">
            <props>
                <prop key="get*">PROPAGATION_REQUIRED,readOnly,timeout_30</prop>
                <prop key="upgrade*">PROPAGATION_REQUIRES_NEW,ISOLATION_SERIALIZABLE</prop>
                <prop key="*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>

    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" propagation="REQUIRED" read-only="true" timeout="30"/>
            <tx:method name="upgrade*" propagation="REQUIRES_NEW" isolation="SERIALIZABLE"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <tx:annotation-driven/>
</beans>